#!/bin/bash
#
# Copyright 2018 Red Hat, Inc.
#
# NAME
#     lab-ad-manage - grading script for RH362 managing AD users GE
#
# SYNOPSIS
#     lab-ad-manage {setup|cleanup}
#
#
# DESCRIPTION
#     This script, based on singular argument, it does setup, and cleanup, for the AD users management GE.
#
# CHANGELOG
#   * Mon Mar 19 2018 Artur Glogowski <aglogows@redhat.com>
#   - Added AD trust removal  
#   * Thu Mar 12 2018 Artur Glogowski <aglogows@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
target='workstation'
target2='replica1'
target3='idm'
directory='/home/student/ansible'
REQSVC=( freeipa-ldap freeipa-ldaps dns )
REQPKG=( ipa-server ipa-server-dns )

# This defines which subcommands are supported (setup, grade, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(setup cleanup)

function lab_setup {

  print_header "Setting up ${target} for lab exercise work:"
  host_reachable ${target}
  host_reachable ${target3}

    if ! rpm -q ansible
    then
      pad ' · Installing ansible'
      yum install -y http://materials.example.com/classroom/ansible/ansible-2.5.0-0.0.devel.201801312256git.512d6f6ac6.el7.ans.noarch.rpm && mkdir /home/student/ansible
      if [ $? -eq 0 ]
      then
        print_SUCCESS
      else
        print_FAIL
      fi
    fi
    
    if [ ! -d "$directory" ];
    then
      pad ' · Creating directory'
      mkdir $directory && chown -R student:student $directory
      if [ $? -eq 0 ]
      then
        print_SUCCESS
      else
        print_FAIL
      fi
    fi
  

    pad ' . Downloading files from classroom server'
    cd /home/student/ansible && wget --no-parent -r -nH --reject="index.html*" --cut-dirs=2 http://materials.example.com/classroom/ansible/ && chown -R student:student /home/student/ansible
    if [ $? -eq 0 ]
    then
      print_SUCCESS
    else
      print_FAIL
    fi
    
    if ! rpm -q python2-winrm
    then
      pad ' · Installing python modules'
      cd $directory && rpm -ivh python2-winrm-0.2.2-1.el7.noarch.rpm python2-ntlm3-1.0.2-1.el7.noarch.rpm python2-requests_ntlm-0.3.0-1.el7.noarch.rpm python-xmltodict-0.9.0-1.el7.noarch.rpm
      if [ $? -eq 0 ]
      then
        print_SUCCESS
      else
        print_FAIL
      fi
    fi
 
 # Check for lab prerequisites
  CMD="systemctl is-enabled firewalld && systemctl is-active firewalld"
  if ! ${ssh} ${target3} "${CMD}"
  then
    pad " · Configuring firewalld service on ${target3}"
    ${ssh} ${target3} "${CMD}"
    print_SUCCESS
  else
    pad " · firewalld service is configured on ${target3}"
    print_SUCCESS
  fi

  CMD="firewall-cmd --list-service | grep -w freeipa-ldap && firewall-cmd --list-service | grep -w freeipa-ldaps"
  if ! ${ssh} ${target3} "${CMD}"
  then
    pad " · Configuring firewalld access on ${target3}"
    CMD2="firewall-cmd --add-service=freeipa-ldap --permanent && firewall-cmd --add-service=freeipa-ldaps --permanent && firewall-cmd --add-service=dns --permanent && firewall-cmd --reload"
    ${ssh} ${target3} "${CMD2}"
    print_SUCCESS
  else
    pad " · firewalld access is configured on ${target3}"
    print_SUCCESS
  fi

    pad ' · Configuring IdM server'
    cd /home/student/ansible && ansible-playbook install_ipa_server.yml
    if [ $? -eq 0 ]
    then
      print_SUCCESS
    else
      print_SUCCESS
    fi


    pad ' · Configuring network settings on idm host'
    cd /home/student/ansible && ansible-playbook idm_network.yml
    if [ $? -eq 0 ]
    then
      print_SUCCESS
    else
      print_SUCCESS
    fi


    pad ' · Registering client'
    cd /home/student/ansible && ansible-playbook install_ipa_client.yml --extra-vars "ipa_client=client.lab.example.net"
    if [ $? -eq 0 ]
    then
      print_SUCCESS
    else
      print_SUCCESS
    fi

   # pad ' · Registering replica1'
   # cd /home/student/ansible && ansible-playbook install_ipa_client.yml --extra-vars "ipa_client=replica1.lab.example.net"
   # if [ $? -eq 0 ]
   # then
   #   print_SUCCESS
   # else
   #   print_SUCCESS
   # fi
   
 
    pad ' . Checking status of ad.example.net server'
    if cd /home/student/ansible/windows && ansible ad.example.net -m win_ping
    then 
      print_SUCCESS
    else
      print_FAIL
    fi
 
    

    pad ' . Creating Active Directory users'
    if cd /home/student/ansible/windows && ansible-playbook users.yml
    then
      print_SUCCESS
    else
      print_FAIL
    fi

    pad ' . Verifying the trust'
    CMD='ipa trustdomain-find "example.net"'
    ${ssh} ${target3} ${CMD}
    if [ $? -eq 0 ]
    then
      print_SUCCESS
    else
     print_SUCCESS
     pad ' . Configuring Windows for the trust'  
     cd /home/student/ansible/windows && ansible-playbook win_dns.yml && print_SUCCESS
     pad ' . Configuring IdM for the trust'
       if cd /home/student/ansible/ && ansible-playbook idm_trust.yml
       then
        print_SUCCESS
       else
        print_FAIL
      fi
    
    fi

    CMD="realm list|grep active-directory"
    if ! ${ssh} ${target2} "${CMD}"
    then
      pad " . Checking direct connection on ${target2}"
      print_SUCCESS
    else
      pad " . Removing direct connection from ${target2}"
      CMD2="echo password123! | realm leave --remove example.net"
      ${ssh} ${target2} "${CMD2}"
      print_SUCCESS
    fi


#    CMD="realm list|grep active-directory"
#    if ! ${ssh} ${target2} "${CMD}"
#    then
#      pad " . Configuring direct connection on ${target2}"
#      cd /home/student/ansible && ansible-playbook direct_ad.yml
#      CMD2="realm leave example.net"
#      ${ssh} ${target2} "${CMD2}"
#      print_SUCCESS
#    else
#      pad " . Direct connection is configured on ${target2}"
#      CMD2="realm leave example.net"
#      ${ssh} ${target2} "${CMD2}"
#      print_SUCCESS
#    fi


  

}

function lab_cleanup {

  print_header "Cleaning up the lab on ${target}:"
  
  pad " . Verifying the AD trust"
  CMD='ipa trustdomain-find "example.net"'
  if ${ssh} ${target3} "${CMD}"
  then
    print_SUCCESS
    pad ' . Removing the AD trust'
    cd /home/student/ansible/windows && ansible-playbook win_trust_remove.yml 
    print_SUCCESS
  else
    print_SUCCESS
  fi


  pad " · Removing files from ${target}" 
  cd $directory && rm -rf python*.rpm
    if [ $? -eq 0 ]
    then
      print_SUCCESS
    else
      print_SUCCESS
    fi


}



############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
