#!/bin/bash
#
# Copyright 2017 Red Hat, Inc.
#
# NAME
#     lab-pki-review - grading script for RH362
#
# SYNOPSIS
#     lab-pki-review {setup|cleanup|grade|solve}
#
#        setup   - prepare the system for starting the lab
#        cleanup - perform post-lab cleanup
#        grade   - perform evaluation steps on the system
#        solve   - do the lab exercise for the student (may call setup)
#
# DESCRIPTION
#     This script, based on singular argument, either does setup, grading,
#     cleanup, or solve.
#
# CHANGELOG
#   * Thu Apr 17 2018 Morgan Weetman <mweetman@redhat.com>
#   - original code


PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
target='workstation'

# This defines which subcommands are supported (setup, grade, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(setup cleanup grade)


function lab_setup {

  print_header "Setting up ${target} for lab exercise work:"

  idm_client_base_state
  idm_kra_setup


  print_line
}

function lab_cleanup {

  print_header "Cleaning up the lab on ${target}:"

  pad " . Uninstalling packages on client: "
  if ${ssh} root@client "rpm -q mariadb-server"
  then
    if ${ssh} root@client "yum -y erase mariadb-server"
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  else
    print_SUCCESS
  fi


  print_line
}

function lab_grade {

  print_header "Grading the student's work on ${target}:"

  pad " . Checking vault: db-vault"
  if ${ssh} root@idm "echo RedHat123^ | kinit admin && ipa vault-show db-vault --user idmuser01"
  then
    print_PASS
  else
    print_FAIL
  fi

  pad " . Checking package: mariadb-server"
  if ${ssh} root@client "rpm -q mariadb-server"
  then
    print_PASS
  else
    print_FAIL
  fi

  pad " . Checking service is enabled: mariadb"
  if ${ssh} root@client "systemctl is-enabled mariadb"
  then
    print_PASS
  else
    print_FAIL
  fi

  pad " . Checking service is active: mariadb"
  if ${ssh} root@client "systemctl is-active mariadb"
  then
    print_PASS
  else
    print_FAIL
  fi

  pad " . Checking service principal: mysql/client.lab.example.net"
  if ${ssh} root@idm "echo RedHat123^ | kinit admin && ipa service-show mysql/client.lab.example.net"
  then
    print_PASS
  else
    print_FAIL
  fi

  pad " . Checking mariadb variable: ssl_ca"
  if ${ssh} root@client 'test $(mysql -BN -uroot -pRedHat123^ -e "select @@ssl_ca;") = "/etc/mariadb-certs/ca.crt"'
  then
    print_PASS
  else
    print_FAIL
  fi

  pad " . Checking mariadb variable: ssl_cert"
  if ${ssh} root@client 'test $(mysql -BN -uroot -pRedHat123^ -e "select @@ssl_cert;") = "/etc/mariadb-certs/cert.pem"'
  then
    print_PASS
  else
    print_FAIL
  fi

  pad " . Checking mariadb variable: ssl_key"
  if ${ssh} root@client 'test $(mysql -BN -uroot -pRedHat123^ -e "select @@ssl_key;") = "/etc/mariadb-certs/key.pem"'
  then
    print_PASS
  else
    print_FAIL
  fi

  pad " . Checking idmuser01 access: top_secret"
  if ${ssh} root@client 'mysql -uidmuser01 --ssl_cert ~/idmuser01.pem --ssl_key ~/idmuser01.key -e "describe top_secret.documents;"'
  then
    print_PASS
  else
    print_FAIL
  fi

  print_line
}


############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
