#
# Copyright 2016 Red Hat, Inc.
#
# NAME
#     labtool.rh362.shlib - lab grading script rh362 function library
#
# SYNOPSIS
#     Add the following line at the top of your script:
#
#        source /path/to/labtool.rh362.shlib
#
#     *after* the source of the generic labtool.shlib
#
# DESCRIPTION
#
# CHANGELOG
#   * Wed Feb 14 2018 Razique Mahroua <rmahroua@redhat.com>
#   - adds base functions for materials retrieving
#   * Thu Jan 21 2016 George Hacker <ghacker@redhat.com>
#   - create template

# Common environment variables
curl_save='curl -s -S -o'
curl='curl -s'
wget='wget -O'
user='student'
course='RH362'
course_home="/home/${user}/${course}"
labs="${course_home}/labs"
solutions="${course_home}/solutions"
materials="http://materials.example.com:${RHT_CONTENT_PORT:-80}"
contents="http://content.example.com:${RHT_CONTENT_PORT:-80}"
timeout=45


#Disables Windows screen auto-lock
function unlock {

  ansible_dir='/home/student/ansible/windows'

  print_header "Configuring Windows:"

  pad ' . Disabling Windows lock screen'
  cd ${ansible_dir} && ansible-playbook unlock.yml
  if [ $? -eq 0 ]
  then
    print_SUCCESS
  else
    print_FAIL
  fi

print_line
}


# Usage: idm_ad_trust [no_users], returns: 0|!0, status: in development
#
# Description: configures AD trust, creates AD users
function idm_ad_trust {

  # Create users? - default is yes
  no_users=0

  if [[ "$1" == "no_users" ]]
  then
    no_users=1
  fi

  ansible_dir='/home/student/ansible'
  idm_host='idm.lab.example.net'

  pad ' . Configuring AD trust: '
  if ${ssh} ${idm_host} 'echo RedHat123^ | kinit admin && ipa trustdomain-find "example.net"'
  then
    print_SUCCESS
  else
     cd ${ansible_dir} && ansible-playbook windows/win_dns.yml
     if cd ${ansible_dir} && ansible-playbook idm_trust.yml
     then
       print_SUCCESS
     else
       print_FAIL
    fi
  fi

  if [[ ${no_users} -eq 0 ]]
  then
    pad ' . Creating AD users: '
    if cd ${ansible_dir} && ansible-playbook windows/adusers.yml
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  fi

}

# Usage: idm_base_state [no_users], returns: 0|!0, status: tested
#
# Description: installs Ansible playbooks, IdM, registers client, adds users
function idm_base_state {

  # Create users? - default is yes
  no_users=0

  if [[ "$1" == "no_users" ]]
  then
    no_users=1
  fi

  ansible_dir='/home/student/ansible'
  idm_host='idm.lab.example.net'

  print_header 'Configuring IdM base state:'

  if [ ! -d "${ansible_dir}" ];
  then
    pad " · Creating directory: ${ansible_dir}"
    mkdir ${ansible_dir} && chown -R student:student ${ansible_dir}
    if [[ $? -eq 0 ]]
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  fi

  pad ' . Downloading Ansible playbooks: '
  cd ${ansible_dir} && wget --no-parent -r -nH --reject="index.html*" --cut-dirs=2 ${materials}/classroom/ansible/ && chown -R student:student ${ansible_dir}
  if [[ $? -eq 0 ]]
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  if ! rpm -q python2-winrm
  then
    pad ' · Installing Ansible Windows modules: '
    cd ${ansible_dir} && rpm -ivh python2-winrm-0.2.2-1.el7.noarch.rpm python2-ntlm3-1.0.2-1.el7.noarch.rpm python2-requests_ntlm-0.3.0-1.el7.noarch.rpm python-xmltodict-0.9.0-1.el7.noarch.rpm
    if [[ $? -eq 0 ]]
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  fi

  pad " · Verifying host is reachable: ${idm_host}"
  if host_reachable ${idm_host}
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " · Enabling firewalld service on ${idm_host}: "
  if ! ${ssh} ${idm_host} "systemctl is-enabled firewalld && systemctl is-active firewalld"
  then
    if ${ssh} ${idm_host} "systemctl enable firewalld --now"
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  else
    print_SUCCESS
  fi

  pad " · Configuring firewall services on ${idm_host}: "
  if ! ${ssh} ${idm_host} "firewall-cmd --list-service | grep -w freeipa-ldap && firewall-cmd --list-service | grep -w freeipa-ldaps"
  then
    if ${ssh} ${idm_host} "firewall-cmd --add-service=freeipa-ldap --permanent && firewall-cmd --add-service=freeipa-ldaps --permanent && firewall-cmd --add-service=dns --permanent && firewall-cmd --reload"
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  else
    print_SUCCESS
  fi

  pad " · Configuring IdM on ${idm_host}: "
  cd ${ansible_dir} && ansible-playbook install_ipa_server.yml
  if [[ $? -eq 0 ]]
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " · Configuring network on ${idm_host}: "
  cd ${ansible_dir} && ansible-playbook idm_network.yml
  if [[ $? -eq 0 ]]
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  if [[ ${no_users} -eq 0 ]]
  then
    pad " · Creating IdM users: "
    cd ${ansible_dir} && ansible-playbook idm_users.yml
    if [[ $? -eq 0 ]]
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  fi

  print_line
}

#Install IdM and registers client
function idm_client_base_state {

  # Create users? - default is yes
  no_users=0

  if [[ "$1" == "no_users" ]]
  then
    no_users=1
  fi

  ansible_dir='/home/student/ansible'
  idm_host='idm.lab.example.net'

  print_header 'Configuring IdM base state:'

  if [ ! -d "${ansible_dir}" ];
  then
    pad " · Creating directory: ${ansible_dir}"
    mkdir ${ansible_dir} && chown -R student:student ${ansible_dir}
    if [[ $? -eq 0 ]]
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  fi

  pad ' . Downloading Ansible playbooks: '
  cd ${ansible_dir} && wget --no-parent -r -nH --reject="index.html*" --cut-dirs=2 ${materials}/classroom/ansible/ && chown -R student:student ${ansible_dir}
  if [[ $? -eq 0 ]]
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  if ! rpm -q python2-winrm
  then
    pad ' · Installing Ansible Windows modules: '
    cd ${ansible_dir} && rpm -ivh python2-winrm-0.2.2-1.el7.noarch.rpm python2-ntlm3-1.0.2-1.el7.noarch.rpm   python2-requests_ntlm-0.3.0-1.el7.noarch.rpm python-xmltodict-0.9.0-1.el7.noarch.rpm
    if [[ $? -eq 0 ]]
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  fi

  pad " · Verifying host is reachable: ${idm_host}"
  if host_reachable ${idm_host}
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " · Enabling firewalld service on ${idm_host}: "
  if ! ${ssh} ${idm_host} "systemctl is-enabled firewalld && systemctl is-active firewalld"
  then
    if ${ssh} ${idm_host} "systemctl enable firewalld --now"
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  else
    print_SUCCESS
  fi

  pad " · Configuring firewall services on ${idm_host}: "
  if ! ${ssh} ${idm_host} "firewall-cmd --list-service | grep -w freeipa-ldap && firewall-cmd --list-service | grep -w freeipa-ldaps"
  then
    if ${ssh} ${idm_host} "firewall-cmd --add-service=freeipa-ldap --permanent && firewall-cmd --add-service=freeipa-ldaps --permanent && firewall-cmd --add-service=dns --permanent && firewall-cmd --reload"
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  else
    print_SUCCESS
  fi

  pad " · Configuring IdM on ${idm_host}: "
  cd ${ansible_dir} && ansible-playbook install_ipa_server.yml
  if [[ $? -eq 0 ]]
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " · Configuring network on ${idm_host}: "
  cd ${ansible_dir} && ansible-playbook idm_network.yml
  if [[ $? -eq 0 ]]
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad ' · Registering client: '
  cd ${ansible_dir} && ansible-playbook install_ipa_client.yml --extra-vars "ipa_client=client.lab.example.net"
  if [[ $? -eq 0 ]]
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  if [[ ${no_users} -eq 0 ]]
  then
    pad " · Creating IdM users: "
    cd ${ansible_dir} && ansible-playbook idm_users.yml
    if [[ $? -eq 0 ]]
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  fi

  print_line
}



# Usage: idm_kra_setup, returns: 0|!0, status: in development
#
# Description: configures the KRA, required for vault operations
function idm_kra_setup {

  print_header "Configuring Key Recovery Authority:"

  pad ' . Verifying KRA installation: '
  curl -sfk https://idm.lab.example.net/kra/rest/config/cert/transport > /dev/null
  if [[ $? -eq 22 ]]
  then
    if ${ssh} root@idm "ipa-kra-install -p RedHat123^"
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  else
    print_SUCCESS
  fi

  print_line
}

# Usage: idm_client_utility, returns: 0|!0, status: in development
#
# Description: configures the utility host as an IdM client
function idm_client_utility {

  ansible_dir='/home/student/ansible'

  print_header "Configuring the utility host:"

  pad ' · Registering utility: '
  cd ${ansible_dir} && ansible-playbook install_ipa_client.yml --extra-vars "ipa_client=utility.lab.example.net"
  if [[ $? -eq 0 ]]
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  print_line
}

# Usage: idm_service_status, returns: 0|!0, status: tested
#
# Description: returns the number of inactive IdM services
function idm_service_status {

  local fail_count=0
  idm_host='idm.lab.example.net'
  idm_inactive_services=()
  idm_services=('certmonger.service'
                'dirsrv@LAB-EXAMPLE-NET.service'
                'httpd.service'
                'ipa-custodia.service'
                'ipa-dnskeysyncd.service'
                'ipa.service'
                'kadmin.service'
                'krb5kdc.service'
                'named-pkcs11.service'
                'ntpd.service'
                'pki-tomcatd@pki-tomcat.service')

  for svc in ${idm_services[@]}
  do
    if ! ${ssh} ${idm_host} systemctl is-active ${svc} -q
    then
      idm_inactive_services+=(${svc})
      let fail_count+=1
    fi
  done

  if [[ $fail_count -gt 0 ]]
  then
    >&2 echo "[!] inactive services: ${idm_inactive_services[@]}"
  fi

  return $fail_count

}

# Usage: idm_service_ready, returns: 0|!0, status: tested
#
# Description: returns the number of inactive IdM services
#              but attempts to start inactive ones
function idm_service_ready {

  local fail_count=0
  idm_host='idm.lab.example.net'
  idm_inactive_services=()
  idm_services=('certmonger.service'
                'dirsrv@LAB-EXAMPLE-NET.service'
                'httpd.service'
                'ipa-custodia.service'
                'ipa-dnskeysyncd.service'
                'ipa.service'
                'kadmin.service'
                'krb5kdc.service'
                'named-pkcs11.service'
                'ntpd.service'
                'pki-tomcatd@pki-tomcat.service')

  for svc in ${idm_services[@]}
  do
    if ! ${ssh} ${idm_host} systemctl is-active ${svc} -q
    then
      idm_inactive_services+=(${svc})
      let fail_count+=1
    fi
  done

  if [[ $fail_count -gt 0 ]]
  then
    >&2 echo "[!] inactive services: ${idm_inactive_services[@]}"
    for svc in ${idm_inactive_services[@]}
    do
      >&2 echo "[!] attempting to start inactive service: ${svc}"
      ${ssh} ${idm_host} systemctl start ${svc} -q
      sleep 2
      if ${ssh} ${idm_host} systemctl is-active ${svc} -q
      then
        let fail_count-=1
      fi
    done
  fi

  return $fail_count

}

# Usage:
#   cleanup_lab_files lab-name
# Return value: 0 = success, 1 = failure
# Prints output: No
# Status: Tested
#
function cleanup_lab_files
{
  local this="${lab_directory_name}"
  source /etc/rht

  pad " · Cleaning lab files for ${title}"
  if [ -d "${labs}/${this}" ]; then
    if rm -rf ${labs}/${this}; then
      print_SUCCESS
    else
      print_FAIL
    fi
  else
    print_SUCCESS
  fi

  pad " · Cleaning solutions files for ${title}"
  if [ -d "${solutions}/${this}" ]; then
    if rm -rf ${solutions}/${this}; then
      print_SUCCESS
    else
      print_FAIL
    fi
  else
    print_SUCCESS
  fi
}

# Usage:
#   my_grab_lab_files optional:'no-solution'
# Return value: 0 = success, 1 = failure
# Prints output
# Status: Tested
#
function my_grab_lab_files
{
  local no_solution="${1}"
  local this="${lab_directory_name}"
  source /etc/rht

  print_header "Downloading files for ${title}"

  if [ -d "${labs}/${this}" ]; then
    print_line "Exercise has already been downloaded."
    print_line "Use cleanup to start over."
    print_line
    return 0
  fi

  pad ' · Download exercise files'
  mkdir -p "${labs}/${this}"
  ${curl_save} ${labs}/${this}.tgz ${materials}/labs/${this}.tgz
  if [ -f "${labs}/${this}.tgz" ]; then
    # We ensure that we can unzip the file
    if file ${labs}/${this}.tgz | grep gzip; then
      pushd ${labs}
      if tar xzf ${this}.tgz ; then
        rm -f ${this}.tgz
        print_SUCCESS
      else
        print_FAIL
        return 1
      fi
      popd
    else
      rm ${labs}/${this}.tgz
      print_SUCCESS
    fi
  else
    # RAZ: Original logic was to print FAIL.
    # However, 'labs' can be empty, that doesn't mean that
    # the call failed. We can return a print_SUCCESS
    # print_FAIL
    # return 0
    print_SUCCESS
  fi

  if [ "${no_solution}" == "" ]; then
    pad ' · Download solution files'
    mkdir -p "${solutions}/${this}"
    ${curl_save} ${solutions}/${this}.tgz ${materials}/solutions/${this}.tgz
    if [ -f "${solutions}/${this}.tgz" ]; then
      # We ensure that we can unzip the file
      if file ${solutions}/${this}.tgz | grep gzip; then
        pushd ${solutions}
        if tar xzf ${this}.tgz; then
          rm -f ${this}.tgz
          print_SUCCESS
        else
          print_FAIL
          return 1
        fi
        popd
      else
        rm ${solutions}/${this}.tgz
        print_SUCCESS
      fi
    else
      print_FAIL
      return 1
    fi
  fi

  chown -R student:student /home/student/${RHT_COURSE^^}
  print_line
}

# vim: ts=2 sw=2
